name: Release Helm Chart with chart-releaser

# on:
#   workflow_dispatch:
#   release:
#     types: [published]
on:
  push:
    tags:
      - 'v*'
    branches:
      - main

jobs:
  release-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    env:
      GPG_NAME: "1moses1"
      GPG_EMAIL: "iradukundam47@gmail.com"
      CHART_DIR: "backstage-helm-chart"
      YQ_VERSION: "v4.40.5"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git Identity
        run: |
          git config user.name "${{ env.GPG_NAME }}"
          git config user.email "${{ env.GPG_EMAIL }}"

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.14.3

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq gnupg2 curl coreutils pinentry-curses 
          sudo wget https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          ORAS_VERSION="1.1.0"
          curl -LO https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz
          tar -zxvf oras_${ORAS_VERSION}_linux_amd64.tar.gz
          sudo mv oras /usr/local/bin/oras

      - name: Update Chart Version from Tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
            echo "Setting version to $VERSION"
            yq eval ".version = \"$VERSION\"" -i "$CHART_DIR/Chart.yaml"
          else
            echo "Skipping Chart version update; not a tag push."
          fi


      - name: Auto-generate GPG Key and Prepare Environment
        id: gpg_setup
        run: |
          export GNUPGHOME="$(mktemp -d)"
          echo "GNUPGHOME_PATH=$GNUPGHOME" >> $GITHUB_OUTPUT
          gpg --batch --passphrase '' --quick-gen-key "${{ env.GPG_NAME }} <${{ env.GPG_EMAIL }}>" rsa4096 sign 1d
          gpg --export -o "$GNUPGHOME/pubring.gpg"
          gpg --export-secret-keys -o "$GNUPGHOME/secring.gpg"
          mkdir -p .cr-gpg
          cp "$GNUPGHOME/secring.gpg" .cr-gpg/secring.gpg
        env:
          GPG_NAME: ${{ env.GPG_NAME }}
          GPG_EMAIL: ${{ env.GPG_EMAIL }}

      - name: Debug .cr-gpg
        run: ls -la .cr-gpg

      - name: Move .cr-gpg and Chart.yaml to templates
        run: |
          cp -rf .cr-gpg "$CHART_DIR/templates"
          cp "$CHART_DIR/Chart.yaml" "$CHART_DIR/templates"

      - name: Characteristics for .cr-gpg/secring.gpg
        run: |
          file "$CHART_DIR/templates/.cr-gpg/secring.gpg"
          wc .cr-gpg/secring.gpg
          wc "$CHART_DIR/templates/.cr-gpg/secring.gpg"

      - name: Auto-detect subchart repositories
        run: |
          for dir in $(ls -d ${CHART_DIR}/*/ 2>/dev/null || true); do
            helm dependency list "$dir" 2>/dev/null | tail +2 | head -n -1 | awk '{ print "helm repo add " $1 " " $3 }' | while read cmd; do $cmd; done
          done

      - name: Dependency update
        run: |
          cd "$CHART_DIR/templates"
          helm dependency update

      - name: Copy all the files into charts directory
        run: |
          mkdir charts
          cp -r backstage-helm-chart/* charts
          cd charts
          ls -la

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.7.0
        with:
          charts_dir: backstage-helm-chart
          
        env:
          CR_TOKEN: "${{ secrets.PAT }}"
          CR_KEY: "${{ env.GPG_EMAIL }}"
          CR_SIGN: true
          # CR_SKIP_EXISTING: false
          CR_MARK_AS_LATEST: true

      - name: See what chart-releaser sees
        run: |
          cr package backstage-helm-chart
