name: Release Helm Chart with Cosign (OCI)

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  release-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    env:
      GPG_NAME: "1moses1"
      GPG_EMAIL: "iradukundam47@gmail.com"
      CHART_DIR: "backstage-helm-chart"
      YQ_VERSION: "v4.40.5"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git Identity
        run: |
          git config user.name "${{ env.GPG_NAME }}"
          git config user.email "${{ env.GPG_EMAIL }}"

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.14.3

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq gnupg2 curl coreutils pinentry-curses 
          sudo wget https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          ORAS_VERSION="1.1.0"
          curl -LO https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz
          tar -zxvf oras_${ORAS_VERSION}_linux_amd64.tar.gz
          sudo mv oras /usr/local/bin/oras

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Authenticate to GHCR (Helm + Docker)
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Update Chart Version from Tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          yq eval ".version = \"$VERSION\"" -i "$CHART_DIR/Chart.yaml"

      - name: Auto-generate GPG Key and Prepare Environment
        id: gpg_setup
        run: |
          export GNUPGHOME="$(mktemp -d)"
          echo "GNUPGHOME_PATH=$GNUPGHOME" >> $GITHUB_OUTPUT
          gpg --batch --passphrase '' --quick-gen-key "${{ env.GPG_NAME }} <${{ env.GPG_EMAIL }}>" rsa2048 sign 1d
          gpg --export -o "$GNUPGHOME/pubring.gpg"
          gpg --export-secret-keys -o "$GNUPGHOME/secring.gpg"
        env:
          GPG_NAME: ${{ env.GPG_NAME }}
          GPG_EMAIL: ${{ env.GPG_EMAIL }}

      - name: Package chart with provenance
        run: |
          helm package "$CHART_DIR" \
            --sign \
            --key "${{ env.GPG_EMAIL }}" \
            --keyring "$GNUPGHOME/secring.gpg"
        env:
          CHART_DIR: ${{ env.CHART_DIR }}
          GNUPGHOME: ${{ steps.gpg_setup.outputs.GNUPGHOME_PATH }}
          GPG_EMAIL: ${{ env.GPG_EMAIL }}

      - name: Push chart to OCI
        run: |
          CHART_PACKAGE_FILE=$(ls *.tgz | head -n 1)
          helm push "$CHART_PACKAGE_FILE" "oci://ghcr.io/${{ github.repository_owner }}/charts"

      - name: Upload provenance file to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            backstage-*.prov

      - name: Get chart digest
        id: digest
        run: |
          CHART_NAME_LOWER="backstage"
          VERSION=${GITHUB_REF#refs/tags/}
          OCI_CHART_REF_BASE="ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME_LOWER}"
          MANIFEST_DIGEST=$(oras manifest fetch --descriptor "${OCI_CHART_REF_BASE}:${VERSION}" | jq -r '.digest')
          echo "MANIFEST_DIGEST_VALUE=$MANIFEST_DIGEST" >> $GITHUB_OUTPUT

      - name: Sign chart with Cosign (digest)
        run: |
          CHART_NAME_LOWER="backstage"
          CHART_OCI_REF_WITH_DIGEST="ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME_LOWER}@${{ steps.digest.outputs.MANIFEST_DIGEST_VALUE }}"
          export COSIGN_EXPERIMENTAL=1 
          cosign sign --yes "$CHART_OCI_REF_WITH_DIGEST"
          cosign verify \
            --certificate-identity "https://github.com/${{ github.repository }}/.github/workflows/helm-publish.yml@${{ github.ref }}" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            "$CHART_OCI_REF_WITH_DIGEST"

      - name: Push ArtifactHub metadata to GHCR
        run: |
          oras push ghcr.io/${{ github.repository_owner }}/charts/backstage:artifacthub.io \
            --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
            $CHART_DIR/artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml

      - name: Notify ArtifactHub to Reindex Repository
        if: ${{ success() }}
        run: |
          curl -X POST https://artifacthub.io/api/v1/repositories/track \
            -H "Authorization: Bearer ${{ secrets.ARTIFACTHUB_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "oci://ghcr.io/${{ github.repository_owner }}/charts",
              "kind": 0,
              "repository_name": "irembo-backstage-helm"
            }'

      - name: Output ArtifactHub Chart Link
        run: |
          VERSION=${{ github.ref }}
          echo "ðŸ“¦ Chart pushed successfully!"
          echo "ðŸ“¡ Waiting for Artifact Hub to index the repository (this can take ~30 mins)."
          echo "ðŸ”— Expected URL (once indexed): https://artifacthub.io/packages/helm/irembo-backstage-helm/backstage"
