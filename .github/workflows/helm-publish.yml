name: Release Helm Chart with Cosign (OCI)

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  release-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    env:
      GPG_NAME: "1moses1"
      GPG_EMAIL: "iradukundam47@gmail.com"
      CHART_DIR: "backstage-helm-chart"
      YQ_VERSION: "v4.40.5"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Git Identity
        run: |
          git config user.name "${{ env.GPG_NAME }}"
          git config user.email "${{ env.GPG_EMAIL }}"

      - name: Set up Helm
        uses: azure/setup-helm@v4.3.0
        with:
          version: v3.14.3

      - name: Install dependencies (jq, gnupg, curl, oras, Mike Farah's yq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq gnupg2 curl coreutils pinentry-loopback # Ensure pinentry-loopback is installed
          
          echo "Installing yq ${{ env.YQ_VERSION }}..."
          sudo wget https://github.com/mikefarah/yq/releases/download/${{ env.YQ_VERSION }}/yq_linux_amd64 -O /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq
          echo "yq version: $(yq --version)"

          ORAS_VERSION="1.1.0"
          curl -LO "https://github.com/oras-project/oras/releases/download/v${ORAS_VERSION}/oras_${ORAS_VERSION}_linux_amd64.tar.gz"
          tar -zxvf "oras_${ORAS_VERSION}_linux_amd64.tar.gz"
          sudo mv oras /usr/local/bin/oras
          echo "oras version: $(oras version)"

      - name: Set up Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Authenticate to GHCR (Helm + Docker)
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | helm registry login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Update Chart Version from Tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          yq eval ".version = \"$VERSION\"" -i "$CHART_DIR/Chart.yaml"
          echo "Updated Chart.yaml version to $VERSION"
          echo "Contents of $CHART_DIR/Chart.yaml after update:"
          cat "$CHART_DIR/Chart.yaml"

      - name: Auto-generate GPG Key and Prepare Environment
        id: gpg_setup
        run: |
          # 1. Set up GNUPGHOME and GPG_TTY
          export GNUPGHOME="$(mktemp -d)"
          echo "GNUPGHOME_PATH=$GNUPGHOME" >> $GITHUB_OUTPUT # Output for other steps
          echo "Using GNUPGHOME for setup: $GNUPGHOME"
          
          # GPG_TTY is crucial for non-interactive pinentry
          export GPG_TTY=$(tty)
          echo "GPG_TTY for setup: $GPG_TTY"

          # 2. Start gpg-agent and set its environment variables for the current shell
          # The output of gpg-agent --daemon are shell commands to set GPG_AGENT_INFO etc.
          echo "Starting gpg-agent and sourcing its environment..."
          # The --allow-loopback-pinentry might be needed if pinentry-loopback is not default or if gpg-agent is strict.
          eval $(gpg-agent --homedir "$GNUPGHOME" --daemon --pinentry-program /usr/bin/pinentry-loopback --allow-loopback-pinentry)
          
          # Verify GPG_AGENT_INFO is set (it's an internal detail for gpg, not directly used by Helm usually)
          if [ -z "$GPG_AGENT_INFO" ]; then
            echo "Warning: GPG_AGENT_INFO was not set by gpg-agent. This might be okay if gpg commands still work." >&2
          else
            echo "GPG_AGENT_INFO is set to: $GPG_AGENT_INFO"
          fi

          # 3. Generate the GPG key pair
          echo "Generating GPG key..."
          # Ensure gpg uses the loopback pinentry for non-interactive passphrase input
          gpg --batch --yes --pinentry-mode loopback --passphrase '' --quick-gen-key "${{ env.GPG_NAME }} <${{ env.GPG_EMAIL }}>" rsa2048 sign 1d
          
          # 4. Extract and output the GPG Key Fingerprint
          GPG_FINGERPRINT=$(gpg --list-secret-keys --with-colons "${{ env.GPG_EMAIL }}" | grep '^fpr:' | cut -d':' -f10)
          if [ -z "$GPG_FINGERPRINT" ]; then
            echo "Error: Could not retrieve GPG Key Fingerprint." >&2
            gpg --list-secret-keys --with-colons "${{ env.GPG_EMAIL }}" # Show output for debugging
            exit 1
          fi
          echo "GPG_FINGERPRINT_VALUE=$GPG_FINGERPRINT" >> $GITHUB_OUTPUT
          echo "Generated GPG Key Fingerprint: $GPG_FINGERPRINT"

          # 5. Export keys to legacy formats (pubring.gpg, secring.gpg)
          echo "Exporting public keys to $GNUPGHOME/pubring.gpg..."
          gpg --batch --yes --export -o "$GNUPGHOME/pubring.gpg"
          
          echo "Exporting secret keys to $GNUPGHOME/secring.gpg..."
          gpg --batch --yes --export-secret-keys -o "$GNUPGHOME/secring.gpg"

          # 6. Verify legacy file creation
          echo "Verifying presence and content of legacy keyring files in $GNUPGHOME:"
          if [ -f "$GNUPGHOME/pubring.gpg" ] && [ -s "$GNUPGHOME/pubring.gpg" ]; then
            echo "$GNUPGHOME/pubring.gpg exists and is not empty."
            ls -l "$GNUPGHOME/pubring.gpg"
          else
            echo "Error: $GNUPGHOME/pubring.gpg was NOT created or is empty!" >&2
            ls -laR "$GNUPGHOME" # Show all contents for debugging
            exit 1
          fi
          
          if [ -f "$GNUPGHOME/secring.gpg" ] && [ -s "$GNUPGHOME/secring.gpg" ]; then
            echo "$GNUPGHOME/secring.gpg exists and is not empty."
            ls -l "$GNUPGHOME/secring.gpg"
          else
            echo "Error: $GNUPGHOME/secring.gpg was NOT created or is empty!" >&2
            ls -laR "$GNUPGHOME" # Show all contents for debugging
            exit 1
          fi
          
          # 7. List keys and GNUPGHOME contents for debugging
          echo "Listing GPG keys (should pick up from $GNUPGHOME):"
          gpg --list-keys
          gpg --list-secret-keys
          
          echo "Full contents of GNUPGHOME ($GNUPGHOME) at end of setup:"
          ls -laR "$GNUPGHOME"

          # 8. Test direct GPG signing
          echo "Testing direct GPG signing in $GNUPGHOME..."
          echo "Test content for direct signing" > test_file_for_signing.txt
          gpg --batch --yes --pinentry-mode loopback --passphrase '' --local-user "$GPG_FINGERPRINT" --detach-sign test_file_for_signing.txt
          if [ -f "test_file_for_signing.txt.sig" ]; then
            echo "Direct GPG signing test successful (test_file_for_signing.txt.sig created)."
            ls -l test_file_for_signing.txt*
          else
            echo "Error: Direct GPG signing test FAILED. Signature file not created." >&2
            # Consider exiting if this critical test fails: exit 1
          fi

      - name: Package chart with provenance
        env:
          # Set GNUPGHOME directly from the output of the setup step
          GNUPGHOME: ${{ steps.gpg_setup.outputs.GNUPGHOME_PATH }}
          # GPG_KEY_ID is the fingerprint
          GPG_KEY_ID_FOR_HELM: ${{ steps.gpg_setup.outputs.GPG_FINGERPRINT_VALUE }}
          # GPG_TTY is important for pinentry in non-interactive sessions
          GPG_TTY: $(tty) # Set TTY for this step's shell as well
        run: |
          echo "Preparing environment for Helm package step..."
          echo "GNUPGHOME for Helm: $GNUPGHOME"
          echo "GPG_KEY_ID for Helm: $GPG_KEY_ID_FOR_HELM"
          echo "GPG_TTY for Helm: $GPG_TTY"
          
          # It's generally not needed to explicitly eval gpg-agent again here if GNUPGHOME is set
          # and pinentry-loopback is available system-wide for the gpg command Helm calls.

          echo "Checking for $GNUPGHOME/pubring.gpg from Helm step's perspective BEFORE packaging:"
          if [ -f "$GNUPGHOME/pubring.gpg" ]; then
            echo "$GNUPGHOME/pubring.gpg FOUND by Helm step."
            ls -l "$GNUPGHOME/pubring.gpg"
          else
            echo "CRITICAL ERROR: $GNUPGHOME/pubring.gpg NOT FOUND by Helm step!" >&2
            echo "Listing contents of $GNUPGHOME (if it exists):"
            ls -laR "$GNUPGHOME" || echo "$GNUPGHOME directory itself not found or not accessible."
            # Consider exiting: exit 1
          fi
          
          if [ -f "$GNUPGHOME/secring.gpg" ]; then
            echo "$GNUPGHOME/secring.gpg FOUND by Helm step."
            ls -l "$GNUPGHOME/secring.gpg"
          else
            echo "CRITICAL ERROR: $GNUPGHOME/secring.gpg NOT FOUND by Helm step!" >&2
          fi

          echo "Attempting to package chart..."
          helm package "$CHART_DIR" \
            --sign \
            --key "$GPG_KEY_ID_FOR_HELM" \
            --debug

      - name: Push chart to OCI
        run: |
          CHART_PACKAGE_FILE=$(ls *.tgz | head -n 1)
          if [ -z "$CHART_PACKAGE_FILE" ]; then
            echo "Error: No .tgz chart package found to push." >&2
            exit 1
          fi
          echo "Pushing chart package: $CHART_PACKAGE_FILE"
          helm push "$CHART_PACKAGE_FILE" "oci://ghcr.io/${{ github.repository_owner }}/charts"

      - name: Get chart digest
        id: digest
        run: |
          CHART_NAME_LOWER=$(echo "${{ env.CHART_DIR }}" | tr '[:upper:]' '[:lower:]')
          VERSION=${GITHUB_REF#refs/tags/}
          OCI_CHART_REF_BASE="ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME_LOWER}"
          
          echo "Fetching manifest digest for: ${OCI_CHART_REF_BASE}:${VERSION}"
          MANIFEST_DIGEST=$(oras manifest fetch --descriptor "${OCI_CHART_REF_BASE}:${VERSION}" | jq -r '.digest')

          if [ -z "$MANIFEST_DIGEST" ] || [ "$MANIFEST_DIGEST" == "null" ]; then
            echo "Warning: Could not retrieve manifest digest directly. Trying fallback by pushing temp tag..." >&2
            TEMP_TAG="temp-digest-$(date +%s)-${RANDOM}"
            oras manifest push "${OCI_CHART_REF_BASE}:${TEMP_TAG}" "${OCI_CHART_REF_BASE}:${VERSION}"
            MANIFEST_DIGEST=$(oras manifest fetch --descriptor "${OCI_CHART_REF_BASE}:${TEMP_TAG}" | jq -r '.digest')
            oras manifest delete "${OCI_CHART_REF_BASE}:${TEMP_TAG}" # Clean up
          fi

          if [ -z "$MANIFEST_DIGEST" ] || [ "$MANIFEST_DIGEST" == "null" ]; then
            echo "Error: Still could not retrieve a valid manifest digest." >&2
            exit 1
          fi
          echo "MANIFEST_DIGEST_VALUE=$MANIFEST_DIGEST" >> $GITHUB_OUTPUT
          echo "Using Manifest Digest for Cosign: $MANIFEST_DIGEST"

      - name: Sign chart with Cosign (digest)
        run: |
          CHART_NAME_LOWER=$(echo "${{ env.CHART_DIR }}" | tr '[:upper:]' '[:lower:]')
          CHART_OCI_REF_WITH_DIGEST="ghcr.io/${{ github.repository_owner }}/charts/${CHART_NAME_LOWER}@${{ steps.digest.outputs.MANIFEST_DIGEST_VALUE }}"
          echo "Signing OCI chart with Cosign: $CHART_OCI_REF_WITH_DIGEST"
          export COSIGN_EXPERIMENTAL=1 
          cosign sign --yes "$CHART_OCI_REF_WITH_DIGEST"
          echo "Cosign signing complete. Verifying signatures (optional)..."
          cosign verify "$CHART_OCI_REF_WITH_DIGEST"
